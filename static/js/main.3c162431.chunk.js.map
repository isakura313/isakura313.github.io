{"version":3,"sources":["TodoItem/TodoItem.js","TodoItem/index.js","TodoList/TodoList.js","TodoList/index.js","firebase.js","App.js","reportWebVitals.js","index.js"],"names":["containterStyles","marginTop","TodoItem","createTasks","item","className","Box","bgcolor","color","p","m","Grid","container","direction","justify","alignItems","text","Button","variant","onClick","props","deleteItem","key","ListItems","this","entries","map","Container","maxWidth","style","Component","css","fontSize","textAlign","input","button","marginLeft","TodoList","onSubmit","addItem","TextField","type","ref","inputElement","value","currentItem","onChange","handleInput","IconButton","aria-label","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","database","auth","storage","GoogleAuthProvider","messaging","App","event","target","Date","now","setState","e","preventDefault","newItem","state","items","jsonItems","JSON","stringify","localStorage","setItem","console","log","filteredItems","filter","parse","getItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c162431.chunk.js","sourcesContent":["import { Component } from 'react'\r\nimport './index.css'\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst containterStyles = {\r\n    marginTop: \"10px\"\r\n}\r\n\r\nclass TodoItem extends Component {\r\n    createTasks = item => {\r\n        return (\r\n            <div className=\"TodoList\" key={item.key}>\r\n                <Box\r\n                    bgcolor=\"primary.main\"\r\n                    color=\"primary.contrastText\"\r\n                    p={2}\r\n                    m={2}\r\n                >\r\n                    <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"space-around\"\r\n                        alignItems=\"center\"\r\n                    >\r\n                        <div> {item.text} </div>\r\n                        <Button variant=\"contained\" color=\"secondary\"\r\n                            onClick={() => this.props.deleteItem(item.key)}>\r\n                            Done </Button>\r\n                    </Grid>\r\n                </Box >\r\n            </div>\r\n        )\r\n    }\r\n    render() {\r\n        const listEn = this.props.entries // массив ключ - значений\r\n        const ListItems = listEn.map(this.createTasks) // метод \r\n        return <Container maxWidth=\"sm\" style={containterStyles}> {ListItems} </Container>\r\n    }\r\n}\r\nexport default TodoItem","import TodoItem from './TodoItem'\r\n\r\n\r\nexport default TodoItem","import {Component} from 'react'\r\nimport './index.css'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst css = {\r\n    color: \"red\",\r\n    fontSize: \"20px\",\r\n    textAlign: \"center\"\r\n  }\r\n  const input = {\r\n    fontSize: \"20px\",\r\n    color: \"red\"\r\n  }\r\n  const button = {\r\n    marginLeft: \"10px\",\r\n  }\r\n\r\nclass TodoList extends Component{\r\n    render(){\r\n    return (\r\n        <div className=\"App\" style={css}>\r\n            <h1> Todo </h1>\r\n            <form onSubmit= {this.props.addItem} >\r\n                <TextField  \r\n                type=\"text\" style={input} \r\n                ref={this.props.inputElement}\r\n                value = {this.props.currentItem.item}\r\n                onChange={this.props.handleInput}\r\n                />\r\n                <IconButton \r\n                  type=\"submit\"\r\n                  aria-label=\"add\"\r\n                  style={button}\r\n                  >                  \r\n                    <AddIcon />\r\n                  </IconButton>\r\n            </form>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nexport default TodoList","import TodoList from './TodoList'\r\n\r\n\r\nexport default TodoList","import firebase from 'firebase'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBxhyGyH2X4SLVSkrmva9Bvhw3GLl71gh4\",\r\n    authDomain: \"todo-85c4f.firebaseapp.com\",\r\n    projectId: \"todo-85c4f\",\r\n    storageBucket: \"todo-85c4f.appspot.com\",\r\n    messagingSenderId: \"856861952347\",\r\n    appId: \"1:856861952347:web:ea17e49f0677caa6e7f27e\"\r\n  };\r\n\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export default firebase\r\n  export const database = firebase.database()\r\n  export const auth = firebase.auth() \r\n  export const storage = firebase.storage() // это для файлов\r\n  export const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n  export const messaging = firebase.messaging()\r\n  // будет деплоиться на github  в отдельной папке или на  firebase","import './App.css';\r\nimport { Component } from 'react'\r\nimport TodoItem from './TodoItem';\r\nimport TodoList from './TodoList';\r\nimport database from './firebase'\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      items: [{ text: \"Первое дело\", key: 'first' }],\r\n      currentItem: { text: \"Первое дело\", key: 'first' }\r\n      //  дергаем LocalStorage при загрузке ComponentDidMount и писать в state \r\n    }\r\n\r\n\r\n  }\r\n  handleInput = event => {\r\n    const itemText = event.target.value\r\n    const currentItem = { text: itemText, key: Date.now() }\r\n    this.setState({\r\n      currentItem,\r\n    })\r\n\r\n  }\r\n  addItem = e => {\r\n    e.preventDefault()\r\n    const newItem = this.state.currentItem;\r\n    if (newItem.text !== '') {\r\n      const items = [...this.state.items, newItem]\r\n      this.setState({\r\n        items,\r\n        currentItem: { text: '', key: '' }\r\n      })\r\n      // после обновления  state обновляем и localStorage\r\n      const jsonItems = JSON.stringify(items)\r\n      localStorage.setItem(\"items\", jsonItems)\r\n      // const databaseRef = database().ref()\r\n      // const todosRef = databaseRef.child('todos')\r\n\r\n      // todosRef.push(this.currentItem)\r\n    }\r\n  }\r\n  deleteItem = key => {\r\n    console.log(key)\r\n    const filteredItems = this.state.items.filter(item => {\r\n      return item.key !== key\r\n    })\r\n\r\n    console.log(filteredItems)\r\n    this.setState({\r\n      items: filteredItems,\r\n    })\r\n    // текущий отфильтрованный items законсервировать в json\r\n    // обновить значение items в localStorage\r\n    const items = JSON.stringify(filteredItems)\r\n    localStorage.setItem('items', items)\r\n  }\r\n\r\n\r\n  // удаление из LocalStorage  по ключу\r\n  // добавить React UI\r\n  // Добавить LocalStorage\r\n  // Добавить  API - Либо самописное либо Firebase \r\n  // добавить компоненты, которые могут быть полезны - календарь с часами\r\n  // TypeScript\r\n  // Деплой c Docker nginx - отдавать статику  \r\n\r\n  componentDidMount() {\r\n    const items = JSON.parse(localStorage.getItem('items'))\r\n    if (items) {\r\n      this.setState({\r\n        items,\r\n      })\r\n    } else{\r\n      this.setState({\r\n        items:[]\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <TodoList\r\n          addItem={this.addItem}\r\n          inputElement={this.inputElement}\r\n          handleInput={this.handleInput}\r\n          currentItem={this.state.currentItem}\r\n        />\r\n        <TodoItem entries={this.state.items} deleteItem={this.deleteItem} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}